// helper functions
var stringify = function(x){return JSON.stringify(x)}

var distProbs = function(dist, supp) {
return map(function(s) {
  return Math.exp(dist.score(s))
}, supp)
}

var KL = function(p, q) {
var supp = sort(p.support());
var P = distProbs(p, supp), Q = distProbs(q, supp);
var diverge = function(xp,xq) {
  return xp == 0 ? 0 : (xp * Math.log(xp / xq) );
};
return sum(map2(diverge,P,Q));
};

// utterances
var utterances = ["pos-know-pos-dance", 
                 "pos-think-pos-dance",
                 "neg-know-pos-dance", 
                 "neg-think-pos-dance",
                 "pos-bare-pos-dance",
                 "neg-bare-pos-dance"]


// utterance prior is uniform
var utterancePrior = function() {
 uniformDraw(utterances)
}

// cost: simple is less costly than complex, negated is more costly than positive
var cost = function(utterance) {
 var splitutt = utterance.split('-')
 var predicate = splitutt[1] == "think" | splitutt[1] == "know" ? .2 : 0
 var polarity = splitutt[0] == "neg" ? 1 : 0
 var isNull = splitutt[0] == "null" ? 0 : 0
 return predicate + polarity + isNull
}

// cost: simple utterance is less costly than complex utterance
// var cost = function(utterance) {
//   var splitutt = utterance.split('-')
//   var predicate = splitutt[1]
//   return predicate == "bare" ? 1 : 2
// }

// world states
var worldState = [
 {BEL: 1, CC: 1}, 
 {BEL: 1, CC: 0}, 
 {BEL: 0, CC: 1},
 {BEL: 0, CC: 0}
]

// non-uniform state prior for PL, based on CCprior ("higher" or "lower")
var statePrior = function(CCprior) {
 return CCprior == "higher" ? categorical({
   vs: worldState,
   ps: [4,1,4,1]}) : categorical({
   vs: worldState,
   ps: [2,1,2,1]})

}

// // what the speaker believes
// var commonGround = [
//   // no beliefs
//   worldState,
//   // one state excluded
//   [{BEL: 1, CC: 1}, {BEL: 1, CC: 0}, {BEL: 0, CC: 1}],
//   [{BEL: 1, CC: 1}, {BEL: 1, CC: 0}, {BEL: 0, CC: 0}],
//   [{BEL: 1, CC: 1}, {BEL: 0, CC: 1}, {BEL: 0, CC: 0}],
//   [{BEL: 1, CC: 0}, {BEL: 0, CC: 1}, {BEL: 0, CC: 0}],
//   // ah_belief = 1 but dance is uncertain
//   [{BEL: 1, CC: 1}, {BEL: 1, CC: 0}],
//   // dance = 1 but ah_belief is uncertain
//   [{BEL: 1, CC: 1}, {BEL: 0, CC: 1}],  /////////////// 7
//   // either both are true or both are false
//   [{BEL: 1, CC: 1}, {BEL: 0, CC: 0}],
//   // ah_belief = 0, but dance is uncertain
//   [{BEL: 0, CC: 1}, {BEL: 0, CC: 0}], 
//   // dance = 0 but ah_belief is uncertain
//   [{BEL: 1, CC: 0}, {BEL: 0, CC: 0}], ////////////// 10
//   // one is true, other one is false, but it's not clear which one
//   [{BEL: 1, CC: 0}, {BEL: 0, CC: 1}],
//   // speaker has full belief about both parts
//   [{BEL: 1, CC: 1}], 
//   [{BEL: 1, CC: 0}],
//   [{BEL: 0, CC: 1}],
//   [{BEL: 0, CC: 0}]
// ]


//What are plausible common grounds?
var commonGround = [
 worldState, // know nothing
 [{BEL: 1, CC: 1}], // full knowledge
 [{BEL: 1, CC: 0}], // full knowledge
 [{BEL: 0, CC: 1}], // full knowledge
 [{BEL: 0, CC: 0}], // full knowledge
 [{BEL: 1, CC: 1}, {BEL: 1, CC: 0}], // know that BEL
 [{BEL: 0, CC: 1}, {BEL: 0, CC: 0}], // know that not BEL
 [{BEL: 1, CC: 1}, {BEL: 0, CC: 1}], // know that CC  ////// special for neg-know
 [{BEL: 1, CC: 0}, {BEL: 0, CC: 0}] // know that not CC ////// special for neg-think
]


// Qing etal 2016 non-uniform prior over speaker beliefs

// // var uniform = [1, // no beliefs
//               1, 1, 1, 1, // one state excluded
//               1, 1, 1, 1, 1, 1,
//               1, 1, 1, 1]  // speaker has full belief about both parts

var testCommitment2 = [.5, // no beliefs
                     1, 1, 1, 1, // full knowledge
                     2, 2, // knowledge about BEL
                     10, 10// knowledge about C
                    ]

// var testCommitment = [.5, // no beliefs
//                      1, 1, 1, 1, // full knowledge
//                      2, 2, // knowledge about BEL
//                      10, // committed to CC
//                      10  // speaker has full belief about both parts
//                     ]

// var qingETAL = [34.533, // no beliefs
//         0.333, 0.333, 0.333, 0.333, // one state excluded
//         11.733, 11.733, 0.333, 11.733, 11.733, 0.333,
//         4.133, 4.133, 4.133, 4.133]  // speaker has full belief about both parts

var CGPrior = function() {
 return categorical({
   vs: commonGround,
   //     ps: uniform
   // ps: qingETAL
  // ps: testCommitment
   ps: testCommitment2
   //     ps: pointTWO
   //     ps: pointSEVEN
   //     ps: qingETALmod1
   //     ps: qingETALmod2
   //    ps: qingETALmod3
   //     ps: qingETALmod4
   //        ps: qingETALmod5
 })
}


// QUDs
var qudFns = {
 maxQUD : function(state) {return {BEL: state.BEL, CC: state.CC}},
 ccQUD : function(state) {return {CC: state.CC}},
 mcQUD : function(state) {return {BEL: state.BEL}}
}


// uniform prior over QUDs (if max less likely, that doesn't seem to matter much)
var qudPrior = function() {
 categorical({
   //vs: ["maxQUD", "ccQUD", "mcQUD"], ps: [1, 1, 1]
   vs: ["ccQUD", "mcQUD"], ps: [1, 1]
 })
}

// Speaker optimality parameter
var alpha = 4

// new meaning function that does not require state to be in cg
var meaning = function(utterance, state) {
 utterance == "pos-know-pos-dance" ? state.BEL == 1 && state.CC == 1 :
 utterance == "pos-think-pos-dance" ? state.BEL == 1 :
 utterance == "pos-bare-pos-dance" ? state.CC == 1 :
 // negated versions
 utterance == "neg-know-pos-dance" ? false == (state.BEL == 1 && state.CC == 1) :
 utterance == "neg-think-pos-dance" ? false == (state.BEL == 1) :
 utterance == "neg-bare-pos-dance" ? false == (state.CC == 1) : true
}

//  literal listener
var literalListener = function(utterance, cg, qud) {
 Infer({model: function() {
   var state = uniformDraw(worldState)
   var qudFn = qudFns[qud]
   var qudAnswer = qudFn(state)
   // condition in the LL instead of the meaning function
   //     var cg = uniformDraw(commonGround)
   var stringCG = stringify(cg)
   var stringState = stringify(state)
   condition(stringCG.includes(stringState))
   condition(meaning(utterance, state))
   // original condition
   //     condition(meaning(utterance, cg, state))
   return qudAnswer
 }})
} 

// speaker
var speaker = function(state, cg, qud) {
 Infer({model: function() {
   var utterance = uniformDraw(utterances)
   var qudFn = qudFns[qud]
   var qudAnswer = qudFn(state)
   condition(meaning(utterance, state)) // the speaker is always truthful
      factor(alpha * (
             literalListener(utterance, cg, qud).score(qudAnswer)
             - cost(utterance)))
//     factor(alpha * 
//            literalListener(utterance, cg, qud).score(qudAnswer)
//            - cost(utterance))
   return utterance
 }})
}

// pragmatic listener
var pragmaticListener = function(utterance, qud, CCprior) {
 Infer({model: function() {
   var state = statePrior(CCprior)
   var cg = CGPrior()
   //     var qud = qudPrior()
   // make sure that the state is consistent with the speaker's beliefs
   var stringCG = stringify(cg)
   var stringState = stringify(state)
   condition(stringCG.includes(stringState))
   observe(speaker(state, cg, qud), utterance)
   return state.CC
//     return {BEL: state.BEL, CC: state.CC}
   //     return {CC: state.CC, cg: cg}
   //     return {state: state, cg: cg}
   //     return {state:state, qud:qud}
 }})
}

var priorModel = function(CCprior) {
    Infer({model: function(){
      var state = statePrior(CCprior)
      var cg = CGPrior()
      var stringCG = stringify(cg)
      var stringState = stringify(state)
      return state.CC
    }})
  }

var responseGenerator = function(utterance,qud,CCprior){
Infer({model: function() {
  var PLposterior = pragmaticListener(utterance,qud,CCprior)
  var prior = priorModel(CCprior)
  var divergence = KL(PLposterior,prior)
  //print("KL divergence = "+divergence)
  // var response = flip(divergence) ? 
  //     sample(prior) : sample(PLposterior) 
  // convert KL value to a probability, where KL of 0 maps to 1
  var prob = Math.exp(-1*divergence/3)
//   var prob = 1 / (1 + Math.exp(divergence)) // not good
  //print(prob)
  var response = flip(prob) ? 
      sample(PLposterior) : sample(prior)
  return response
}})
}

// define some speaker beliefs for easier reference
var ccTrue = [{BEL: 0, CC: 1},{BEL: 1, CC: 1}]
var ccFalse = [{BEL: 0, CC: 0},{BEL: 1, CC: 0}]
var belTrue = [{BEL: 1, CC: 0},{BEL: 1, CC: 1}]
var belFalse = [{BEL: 0, CC: 0},{BEL: 0, CC: 1}]
var falseFalse = [{BEL: 0, CC: 0}]
var trueFalse = [{BEL: 1, CC: 0}]
var falseTrue = [{BEL: 0, CC: 1}]
var trueTrue = [{BEL: 1, CC: 1}]

// display("null")
// viz(pragmaticListener("null-null-null-null","mcQUD","higher"))
// display(priorModel("lower"))

// display("pos-bare")
// viz.table(pragmaticListener("pos-bare-pos-dance","ccQUD","lower"))
// viz.table(responseGenerator("pos-bare-pos-dance","ccQUD","lower"))
// display(cost("pos-bare-pos-dance"))
// // viz(pragmaticListener("neg-think-pos-dance","mcQUD","higher"))

// display("pos-know")
// viz.table(pragmaticListener("pos-know-pos-dance","mcQUD","lower"))
// viz.table(responseGenerator("pos-know-pos-dance","mcQUD","lower"))
// display(cost("pos-know-pos-dance"))
// // viz(pragmaticListener("neg-think-pos-dance","mcQUD","higher"))

// display("neg-know")
// viz.table(pragmaticListener("neg-know-pos-dance","mcQUD","lower"))
// viz.table(responseGenerator("neg-know-pos-dance","mcQUD","lower"))
// display(cost("neg-know-pos-dance"))
// // viz(pragmaticListener("neg-know-pos-dance","mcQUD","higher"))


// display("pos-think")
// viz.table(pragmaticListener("pos-think-pos-dance","mcQUD","lower"))
// viz.table(responseGenerator("pos-think-pos-dance","mcQUD","lower"))
// display(cost("pos-think-pos-dance"))
// // viz(pragmaticListener("pos-think-pos-dance","mcQUD","higher"))

// display("neg-think")
// viz.table(pragmaticListener("neg-think-pos-dance","mcQUD","lower"))
// viz.table(responseGenerator("neg-think-pos-dance","mcQUD","lower"))
// display(cost("neg-think-pos-dance"))
// // viz(pragmaticListener("neg-think-pos-dance","mcQUD","higher"))

// display(priorModel("higher"))

// display("neg-bare")
// viz.table(pragmaticListener("neg-bare-pos-dance","ccQUD","higher"))
// viz.table(responseGenerator("neg-bare-pos-dance","ccQUD","lower"))
// display(cost("neg-bare-pos-dance"))

// display("PL interprets _Cole knows that Julian dances salsa_ with QUD mc?:")
// viz.table(pragmaticListener("pos-know-pos-dance","mcQUD","higher"))
// viz(pragmaticListener("pos-know-pos-dance","mcQUD","higher"))


// display("PL interprets _Cole doesn't know that Julian dances salsa_ with QUD mc?:")
// viz.table(pragmaticListener("neg-know-pos-dance","mcQUD","lower"))

// display("PL interprets _Cole doesn't know that Julian dances salsa_ with QUD cc?:")
// viz.table(pragmaticListener("neg-know-pos-dance","ccQUD"))

// display("PL interprets _Cole doesn't know that Julian dances salsa_ with QUD max?:")
// viz.table(pragmaticListener("neg-know-pos-dance","maxQUD"))

// LL: utterance, CG, QUD
// viz.table(literalListener("pos-think-pos-dance", ah_beliefFalse, "maxQUD"))\

// speaker({BEL: 0, CC: 1},ccTrue,"maxQUD")

// priorModel("lower”)