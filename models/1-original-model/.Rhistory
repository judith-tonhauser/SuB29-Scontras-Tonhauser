# summarize probabilities over cgs and ccPrior
group_by(utterance,ccPrior) %>%
summarize(sum.prob = sum(prob)) %>%
# calculate by-utterance and prior mean probability
group_by(utterance,ccPrior) %>%
summarize(prob = mean(sum.prob)) %>%
mutate(utterance = recode(utterance, "pos-bare-pos-dance" = "simple-pos",
"pos-know-pos-dance" = "know-pos",
"neg-know-pos-dance" = "know-neg",
"pos-think-pos-dance" = "think-pos",
"neg-think-pos-dance" = "think-neg")) %>%
rename(prior = ccPrior)
PL_agg.utt.prior
table(PL_agg.utt.prior$utterance)
# load data from exp1 to compare to
d_exp1 <- read_csv("../../results/main/main01/data/cd.csv")
nrow(d_exp1) #873
# select relevant utterances: negated know and think, QUD BEL?
d_exp1 = d_exp1 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg") %>%
filter(qud == "nai")
table(d_exp1$utterance)
table(d_exp1$qud)
# calculate mean inference in exp1 to order utterances
means.utt = d_exp1 %>%
group_by(utterance) %>%
summarize(Mean = mean(response))
means.utt
# calculate mean inference ratings in exp1 with QUD BEL?
# exp1
means_exp1 = d_exp1 %>%
group_by(utterance,prior) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp1
means_exp1$utterance = as.factor(as.character(means_exp1$utterance))
# relevel the utterances
means_exp1$utterance = factor(means_exp1$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(means_exp1$utterance)
PL_agg.utt.prior$utterance = factor(PL_agg.utt.prior$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(PL_agg.utt.prior$utterance)
# relevel prior in the relevant two datasets
means_exp1$prior <- factor(means_exp1$prior, levels = c("lower","higher"))
PL_agg.utt.prior$prior <- factor(PL_agg.utt.prior$prior, levels = c("lower","higher"))
means_exp1$utterance <- factor(means_exp1$utterance, levels = c("know-neg","think-neg"))
# plot
ggplot(means_exp1, aes(x=utterance, y=Mean)) +
geom_point(data=PL_agg.utt.prior, aes(x=utterance, y=prob, shape=prior), color = "red", fill="red", size = 3) +
geom_point(aes(shape=prior), size = 3, color="black",fill="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.05,color="black") +
theme(legend.position="none") +
scale_shape_manual(values=c(25,24)) +
#guides(shape=guide_legend("prior probability \n of target content"), nrow=2) +
theme(axis.text.y = element_text(size=10)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
scale_x_discrete(labels=c("simple-pos"="c", "simple-neg"="not c", "know-pos" = "Cole knows \n that c", "know-neg" = "Cole doesn't \n know that c",
"think-pos" = "Cole thinks \n that c", "think-neg" = "Cole doesn't \n think that c")) +
ylab("Predicted probability (red) \n Mean inference rating (black)") +
xlab("Utterance") +
theme(axis.title.x=element_blank())
ggsave("graphs/figures-for-SuB29-paper/P2-with-human.pdf",height=3,width=2.5)
# filter bare utterances and positive utterances, use only higher prior
PL2 = PL %>%
filter(state == "1") %>%
filter(!(grepl("bare",utterance))) %>%
filter(!(grepl("pos-know",utterance))) %>%
filter(!(grepl("pos-think",utterance))) %>%
filter(qud != "maxQUD") %>%
filter(ccPrior == "higher") %>%
droplevels()
PL2
# calculate model predictions by qud, with higher prior
PL_agg.utt.qud = PL2 %>%
# summarize probabilities over cgs and quds
group_by(utterance,qud,ccPrior) %>%
summarize(sum.prob = sum(prob)) %>%
# calculate by-qud mean probability
group_by(qud)  %>%
summarize(prob = mean(sum.prob)) #%>%
# mutate(utterance = recode(utterance, "pos-bare-pos-dance" = "simple-pos",
#                           "pos-know-pos-dance" = "know-pos",
#                           "neg-know-pos-dance" = "know-neg",
#                           "pos-think-pos-dance" = "think-pos",
#                           "neg-think-pos-dance" = "think-neg"))
PL_agg.utt.qud
#table(PL_agg.utt.qud$utterance)
# load data from exp2 to compare to
d_exp2 <- read_csv("../../results/main/main03/data/cd.csv")
nrow(d_exp2) #327
# select relevant utterances: negated know and think, QUD BEL?
d_exp2 = d_exp2 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg")
table(d_exp2$utterance)
table(d_exp2$qud)
# calculate mean inference in exp2 to order utterances
means.utt = d_exp2 %>%
group_by(utterance) %>%
summarize(Mean = mean(responseCC))
means.utt
# calculate mean inference ratings in exp2 by QUD
means_exp2 = d_exp2 %>%
group_by(qud) %>%
summarize(Mean = mean(responseCC), CILow = ci.low(responseCC), CIHigh = ci.high(responseCC)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp2
# relevel QUDs
means_exp2$qud <- factor(means_exp2$qud, levels = c("nai","ai"), labels = c("BEL?", "CC?"))
PL_agg.utt.qud$qud <- factor(PL_agg.utt.qud$qud, levels = c("mcQUD","ccQUD"), labels = c("BEL?", "CC?"))
# plot
ggplot(means_exp2, aes(x=qud, y=Mean)) +
geom_point(data=PL_agg.utt.qud, shape=21, aes(x=qud, y=prob), size = 3, color = "red", fill = "red") +
geom_point(size = 3, color="black",fill="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.2,color="black") +
theme(legend.position="none") +
#scale_fill_manual(values=c("#E69F00","#56B4E9")) +
#guides(fill=guide_legend("QUD")) +
theme(axis.text.y = element_text(size=10)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,.2,.4,.6,.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
scale_x_discrete(labels=c("BEL?"="BEL?", "CC?"="C?")) +
#scale_x_discrete(labels=c("BEL?"="Does Cole \n believe C?", "C?"="Does Charley \n speak Spanish?")) +
ylab("Predicted probability (red) \n Mean inference rating (black)") +
xlab("Utterance") +
theme(axis.title.x=element_blank())
#ggsave("graphs/figures-for-SuB29-paper/P3-without-human.pdf",height=2.5,width=2.2)
ggsave("graphs/figures-for-SuB29-paper/P3-with-human.pdf",height=3,width=2.5)
# filter bare utterances and positive utterances, and consider only QUD BEL?
PL2 = PL %>%
filter(state == "1") %>%
filter(!(grepl("bare",utterance))) %>%
filter(!(grepl("pos-think",utterance))) %>%
filter(!(grepl("pos-know",utterance))) %>%
filter(qud == "mcQUD") %>%
droplevels()
PL2
# calculate model predictions by utterance, aggregating over priors
PL_agg.utt = PL2 %>%
# summarize probabilities over cgs and ccPrior
group_by(utterance,ccPrior) %>%
summarize(sum.prob = sum(prob)) %>%
# calculate by-utterance mean probability
group_by(utterance) %>%
summarize(prob = mean(sum.prob)) %>%
mutate(utterance = recode(utterance, "pos-bare-pos-dance" = "simple-pos",
"pos-know-pos-dance" = "know-pos",
"neg-know-pos-dance" = "know-neg",
"pos-think-pos-dance" = "think-pos",
"neg-think-pos-dance" = "think-neg"))
PL_agg.utt
# load data from exp1 and exp2 for comparison
d_exp1 <- read_csv("../../results/main/main01/data/cd.csv")
nrow(d_exp1) #873
d_exp2 <- read_csv("../../results/main/main03/data/cd.csv")
nrow(d_exp2) #327
# select relevant utterances and QUDs: negated know and think, QUD BEL?
d_exp1 = d_exp1 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg") %>%
filter(qud == "nai")
table(d_exp1$utterance)
table(d_exp1$qud)
d_exp2 = d_exp2 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg") %>%
filter(qud == "nai")
table(d_exp2$utterance)
table(d_exp2$qud)
# calculate mean inference in exp1 to order utterances
means.utt = d_exp1 %>%
group_by(utterance) %>%
summarize(Mean = mean(response))
means.utt
# calculate mean inference ratings in the two experiments with QUD BEL?
# exp1
means_exp1 = d_exp1 %>%
group_by(utterance) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp1
# exp2
means_exp2 = d_exp2 %>%
group_by(utterance) %>%
summarize(Mean = mean(responseCC), CILow = ci.low(responseCC), CIHigh = ci.high(responseCC)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp2
# relevel the utterances
means_exp1$utterance = factor(means_exp1$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(means_exp1$utterance)
means_exp2$utterance = factor(means_exp2$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(means_exp2$utterance)
PL_agg.utt$utterance = factor(PL_agg.utt$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(PL_agg.utt$utterance)
# plot projection (QUD BEL) for neg-know and neg-think (Exp 1)
ggplot(means_exp1, aes(x=utterance, y=Mean)) +
geom_point(data=PL_agg.utt, shape=21, aes(x=utterance, y=prob), size = 3, color = "cornflowerblue", fill="cornflowerblue") +
#geom_point(data=means_exp2, aes(x=utterance, y=Mean), color="#E69F00", size = 3, position=position_nudge(x=.2)) +
#geom_errorbar(data=means_exp2, aes(ymin=YMin,ymax=YMax), width=0,color="#E69F00",position=position_nudge(x=.2)) +
#geom_point(shape=21, size = 3, color = "chartreuse3", fill="chartreuse3") +
#geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.2,color="chartreuse3") +
theme(legend.position="top") +
guides(shape=guide_legend("prior probability of target content"),fill=guide_legend("QUD", override.aes=list(shape=21))) +
theme(axis.text.y = element_text(size=10)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
scale_x_discrete(labels=c("simple-pos"="c", "simple-neg"="not c", "know-pos" = "Cole knows \n that c", "know-neg" = "Cole doesn't \n know that c",
"think-pos" = "Cole thinks \n that c", "think-neg" = "Cole doesn't \n think that c")) +
ylab("Mean inference rating") +
xlab("Utterance") +
theme(axis.title.x=element_blank())
#ggsave("graphs/figures-for-SuB29/P1-without-human.pdf",height=2.5,width=2.2)
ggsave("graphs/figures-for-SuB29-paper/P1-with-human.pdf",height=3,width=2.5)
PL2 = PL %>%
filter(state == "1") %>%
filter(!(grepl("bare",utterance))) %>%
filter(!(grepl("pos-think",utterance))) %>%
filter(!(grepl("pos-know",utterance))) %>%
filter(qud == "mcQUD") %>%
droplevels()
PL2
# calculate model predictions by utterance, aggregating over priors
PL_agg.utt = PL2 %>%
# summarize probabilities over cgs and ccPrior
group_by(utterance,ccPrior) %>%
summarize(sum.prob = sum(prob)) %>%
# calculate by-utterance mean probability
group_by(utterance) %>%
summarize(prob = mean(sum.prob)) %>%
mutate(utterance = recode(utterance, "pos-bare-pos-dance" = "simple-pos",
"pos-know-pos-dance" = "know-pos",
"neg-know-pos-dance" = "know-neg",
"pos-think-pos-dance" = "think-pos",
"neg-think-pos-dance" = "think-neg"))
PL_agg.utt
# load data from exp1 and exp2 for comparison
d_exp1 <- read_csv("../../results/main/main01/data/cd.csv")
nrow(d_exp1) #873
d_exp2 <- read_csv("../../results/main/main03/data/cd.csv")
nrow(d_exp2) #327
# select relevant utterances and QUDs: negated know and think, QUD BEL?
d_exp1 = d_exp1 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg") %>%
filter(qud == "nai")
table(d_exp1$utterance)
table(d_exp1$qud)
d_exp2 = d_exp2 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg") %>%
filter(qud == "nai")
table(d_exp2$utterance)
table(d_exp2$qud)
# calculate mean inference in exp1 to order utterances
means.utt = d_exp1 %>%
group_by(utterance) %>%
summarize(Mean = mean(response))
means.utt
# calculate mean inference ratings in the two experiments with QUD BEL?
# exp1
means_exp1 = d_exp1 %>%
group_by(utterance) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp1
# exp2
means_exp2 = d_exp2 %>%
group_by(utterance) %>%
summarize(Mean = mean(responseCC), CILow = ci.low(responseCC), CIHigh = ci.high(responseCC)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp2
# relevel the utterances
means_exp1$utterance = factor(means_exp1$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(means_exp1$utterance)
means_exp2$utterance = factor(means_exp2$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(means_exp2$utterance)
PL_agg.utt$utterance = factor(PL_agg.utt$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(PL_agg.utt$utterance)
# plot projection (QUD BEL) for neg-know and neg-think (Exp 1)
ggplot(means_exp1, aes(x=utterance, y=Mean)) +
geom_point(data=PL_agg.utt, shape=21, aes(x=utterance, y=prob), size = 3, color = "cornflowerblue", fill="cornflowerblue") +
#geom_point(data=means_exp2, aes(x=utterance, y=Mean), color="#E69F00", size = 3, position=position_nudge(x=.2)) +
#geom_errorbar(data=means_exp2, aes(ymin=YMin,ymax=YMax), width=0,color="#E69F00",position=position_nudge(x=.2)) +
#geom_point(shape=21, size = 3, color = "chartreuse3", fill="chartreuse3") +
#geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.2,color="chartreuse3") +
theme(legend.position="top") +
guides(shape=guide_legend("prior probability of target content"),fill=guide_legend("QUD", override.aes=list(shape=21))) +
theme(axis.text.y = element_text(size=10)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
scale_x_discrete(labels=c("simple-pos"="c", "simple-neg"="not c", "know-pos" = "Cole knows \n that c", "know-neg" = "Cole doesn't \n know that c",
"think-pos" = "Cole thinks \n that c", "think-neg" = "Cole doesn't \n think that c")) +
ylab("Predicted probability (red) \n Mean inference rating (black)") +
xlab("Utterance") +
theme(axis.title.x=element_blank())
#ggsave("graphs/figures-for-SuB29/P1-without-human.pdf",height=2.5,width=2.2)
ggsave("graphs/figures-for-SuB29-paper/P1-with-human.pdf",height=3,width=2.5)
#ggsave("graphs/figures-for-SuB29/P1-without-human.pdf",height=2.5,width=2.2)
ggsave("graphs/figures-for-SuB29-paper/P1-with-human.pdf",height=3,width=2.3)
#ggsave("graphs/figures-for-SuB29/P1-without-human.pdf",height=2.5,width=2.2)
ggsave("graphs/figures-for-SuB29-paper/P1-with-human.pdf",height=2.7,width=2.3)
# filter bare utterances and positive utterances, and keep only QUD BEL?
PL2 = PL %>%
filter(state == "1") %>%
filter(!(grepl("bare",utterance))) %>%
filter(!(grepl("pos-know",utterance))) %>%
filter(!(grepl("pos-think",utterance))) %>%
filter(qud == "mcQUD") %>%
droplevels()
nrow(PL2) #4
# calculate model predictions by utterance and prior
PL_agg.utt.prior = PL2 %>%
# summarize probabilities over cgs and ccPrior
group_by(utterance,ccPrior) %>%
summarize(sum.prob = sum(prob)) %>%
# calculate by-utterance and prior mean probability
group_by(utterance,ccPrior) %>%
summarize(prob = mean(sum.prob)) %>%
mutate(utterance = recode(utterance, "pos-bare-pos-dance" = "simple-pos",
"pos-know-pos-dance" = "know-pos",
"neg-know-pos-dance" = "know-neg",
"pos-think-pos-dance" = "think-pos",
"neg-think-pos-dance" = "think-neg")) %>%
rename(prior = ccPrior)
PL_agg.utt.prior
table(PL_agg.utt.prior$utterance)
# load data from exp1 to compare to
d_exp1 <- read_csv("../../results/main/main01/data/cd.csv")
nrow(d_exp1) #873
# select relevant utterances: negated know and think, QUD BEL?
d_exp1 = d_exp1 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg") %>%
filter(qud == "nai")
table(d_exp1$utterance)
table(d_exp1$qud)
# calculate mean inference in exp1 to order utterances
means.utt = d_exp1 %>%
group_by(utterance) %>%
summarize(Mean = mean(response))
means.utt
# calculate mean inference ratings in exp1 with QUD BEL?
# exp1
means_exp1 = d_exp1 %>%
group_by(utterance,prior) %>%
summarize(Mean = mean(response), CILow = ci.low(response), CIHigh = ci.high(response)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp1
means_exp1$utterance = as.factor(as.character(means_exp1$utterance))
# relevel the utterances
means_exp1$utterance = factor(means_exp1$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(means_exp1$utterance)
PL_agg.utt.prior$utterance = factor(PL_agg.utt.prior$utterance, levels = means.utt$utterance[order(means.utt$Mean)], ordered = TRUE)
levels(PL_agg.utt.prior$utterance)
# relevel prior in the relevant two datasets
means_exp1$prior <- factor(means_exp1$prior, levels = c("lower","higher"))
PL_agg.utt.prior$prior <- factor(PL_agg.utt.prior$prior, levels = c("lower","higher"))
means_exp1$utterance <- factor(means_exp1$utterance, levels = c("know-neg","think-neg"))
# plot
ggplot(means_exp1, aes(x=utterance, y=Mean)) +
geom_point(data=PL_agg.utt.prior, aes(x=utterance, y=prob, shape=prior), color = "red", fill="red", size = 3) +
geom_point(aes(shape=prior), size = 3, color="black",fill="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.05,color="black") +
theme(legend.position="none") +
scale_shape_manual(values=c(25,24)) +
#guides(shape=guide_legend("prior probability \n of target content"), nrow=2) +
theme(axis.text.y = element_text(size=10)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,0.2,0.4,0.6,0.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
scale_x_discrete(labels=c("simple-pos"="c", "simple-neg"="not c", "know-pos" = "Cole knows \n that c", "know-neg" = "Cole doesn't \n know that c",
"think-pos" = "Cole thinks \n that c", "think-neg" = "Cole doesn't \n think that c")) +
ylab("Predicted probability (red) \n Mean inference rating (black)") +
xlab("Utterance") +
theme(axis.title.x=element_blank())
ggsave("graphs/figures-for-SuB29-paper/P2-with-human.pdf",height=2.7,width=2.3)
#ggsave("graphs/figures-for-SuB29-paper/P2-without-human.pdf",height=2.5,width=2.2)
#####  P3 in panel (c): negated know- and think-utterances by QUD ----
# filter bare utterances and positive utterances, use only higher prior
PL2 = PL %>%
filter(state == "1") %>%
filter(!(grepl("bare",utterance))) %>%
filter(!(grepl("pos-know",utterance))) %>%
filter(!(grepl("pos-think",utterance))) %>%
filter(qud != "maxQUD") %>%
filter(ccPrior == "higher") %>%
droplevels()
PL2
# calculate model predictions by qud, with higher prior
PL_agg.utt.qud = PL2 %>%
# summarize probabilities over cgs and quds
group_by(utterance,qud,ccPrior) %>%
summarize(sum.prob = sum(prob)) %>%
# calculate by-qud mean probability
group_by(qud)  %>%
summarize(prob = mean(sum.prob)) #%>%
# mutate(utterance = recode(utterance, "pos-bare-pos-dance" = "simple-pos",
#                           "pos-know-pos-dance" = "know-pos",
#                           "neg-know-pos-dance" = "know-neg",
#                           "pos-think-pos-dance" = "think-pos",
#                           "neg-think-pos-dance" = "think-neg"))
PL_agg.utt.qud
#table(PL_agg.utt.qud$utterance)
# load data from exp2 to compare to
d_exp2 <- read_csv("../../results/main/main03/data/cd.csv")
nrow(d_exp2) #327
# select relevant utterances: negated know and think, QUD BEL?
d_exp2 = d_exp2 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg")
table(d_exp2$utterance)
table(d_exp2$qud)
# calculate mean inference in exp2 to order utterances
means.utt = d_exp2 %>%
group_by(utterance) %>%
summarize(Mean = mean(responseCC))
means.utt
# calculate mean inference ratings in exp2 by QUD
means_exp2 = d_exp2 %>%
group_by(qud) %>%
summarize(Mean = mean(responseCC), CILow = ci.low(responseCC), CIHigh = ci.high(responseCC)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp2
# relevel QUDs
means_exp2$qud <- factor(means_exp2$qud, levels = c("nai","ai"), labels = c("BEL?", "CC?"))
PL_agg.utt.qud$qud <- factor(PL_agg.utt.qud$qud, levels = c("mcQUD","ccQUD"), labels = c("BEL?", "CC?"))
# plot
ggplot(means_exp2, aes(x=qud, y=Mean)) +
geom_point(data=PL_agg.utt.qud, shape=21, aes(x=qud, y=prob), size = 3, color = "red", fill = "red") +
geom_point(size = 3, color="black",fill="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.2,color="black") +
theme(legend.position="none") +
#scale_fill_manual(values=c("#E69F00","#56B4E9")) +
#guides(fill=guide_legend("QUD")) +
theme(axis.text.y = element_text(size=10)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,.2,.4,.6,.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
scale_x_discrete(labels=c("BEL?"="BEL?", "CC?"="C?")) +
#scale_x_discrete(labels=c("BEL?"="Does Cole \n believe C?", "C?"="Does Charley \n speak Spanish?")) +
ylab("Predicted probability (red) \n Mean inference rating (black)") +
xlab("Utterance") +
theme(axis.title.x=element_blank())
#ggsave("graphs/figures-for-SuB29-paper/P3-without-human.pdf",height=2.5,width=2.2)
ggsave("graphs/figures-for-SuB29-paper/P3-with-human.pdf",height=2.7,width=2.3)
# filter bare utterances and positive utterances, use only higher prior
PL2 = PL %>%
filter(state == "1") %>%
filter(!(grepl("bare",utterance))) %>%
filter(!(grepl("pos-know",utterance))) %>%
filter(!(grepl("pos-think",utterance))) %>%
filter(qud != "maxQUD") %>%
filter(ccPrior == "higher") %>%
droplevels()
PL2
# calculate model predictions by qud, with higher prior
PL_agg.utt.qud = PL2 %>%
# summarize probabilities over cgs and quds
group_by(utterance,qud,ccPrior) %>%
summarize(sum.prob = sum(prob)) %>%
# calculate by-qud mean probability
group_by(qud)  %>%
summarize(prob = mean(sum.prob)) #%>%
# mutate(utterance = recode(utterance, "pos-bare-pos-dance" = "simple-pos",
#                           "pos-know-pos-dance" = "know-pos",
#                           "neg-know-pos-dance" = "know-neg",
#                           "pos-think-pos-dance" = "think-pos",
#                           "neg-think-pos-dance" = "think-neg"))
PL_agg.utt.qud
#table(PL_agg.utt.qud$utterance)
# load data from exp2 to compare to
d_exp2 <- read_csv("../../results/main/main03/data/cd.csv")
nrow(d_exp2) #327
# select relevant utterances: negated know and think, QUD BEL?
d_exp2 = d_exp2 %>%
filter(predicate == "know" | predicate == "think") %>%
filter(valence == "neg")
table(d_exp2$utterance)
table(d_exp2$qud)
# calculate mean inference in exp2 to order utterances
means.utt = d_exp2 %>%
group_by(utterance) %>%
summarize(Mean = mean(responseCC))
means.utt
# calculate mean inference ratings in exp2 by QUD
means_exp2 = d_exp2 %>%
group_by(qud) %>%
summarize(Mean = mean(responseCC), CILow = ci.low(responseCC), CIHigh = ci.high(responseCC)) %>%
mutate(YMin = Mean - CILow, YMax = Mean + CIHigh) %>%
select(-c(CILow, CIHigh))
means_exp2
# relevel QUDs
means_exp2$qud <- factor(means_exp2$qud, levels = c("nai","ai"), labels = c("BEL?", "CC?"))
PL_agg.utt.qud$qud <- factor(PL_agg.utt.qud$qud, levels = c("mcQUD","ccQUD"), labels = c("BEL?", "CC?"))
# plot
ggplot(means_exp2, aes(x=qud, y=Mean)) +
geom_point(data=PL_agg.utt.qud, shape=21, aes(x=qud, y=prob), size = 3, color = "red", fill = "red") +
geom_point(size = 3, color="black",fill="black") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.05,color="black") +
theme(legend.position="none") +
#scale_fill_manual(values=c("#E69F00","#56B4E9")) +
#guides(fill=guide_legend("QUD")) +
theme(axis.text.y = element_text(size=10)) +
scale_y_continuous(limits = c(0,1),breaks = c(0,.2,.4,.6,.8,1.0), labels = c("0",".2",".4",".6",".8","1")) +
scale_x_discrete(labels=c("BEL?"="BEL?", "CC?"="C?")) +
#scale_x_discrete(labels=c("BEL?"="Does Cole \n believe C?", "C?"="Does Charley \n speak Spanish?")) +
ylab("Predicted probability (red) \n Mean inference rating (black)") +
xlab("Utterance") +
theme(axis.title.x=element_blank())
#ggsave("graphs/figures-for-SuB29-paper/P3-without-human.pdf",height=2.5,width=2.2)
ggsave("graphs/figures-for-SuB29-paper/P3-with-human.pdf",height=2.7,width=2.3)
